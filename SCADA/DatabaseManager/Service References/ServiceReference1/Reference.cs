//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference1.AnalogTag))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DatabaseManager.ServiceReference1.DigitalTag))]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string addressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool onField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int scanTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string address {
            get {
                return this.addressField;
            }
            set {
                if ((object.ReferenceEquals(this.addressField, value) != true)) {
                    this.addressField = value;
                    this.RaisePropertyChanged("address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool on {
            get {
                return this.onField;
            }
            set {
                if ((this.onField.Equals(value) != true)) {
                    this.onField = value;
                    this.RaisePropertyChanged("on");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int scanTime {
            get {
                return this.scanTimeField;
            }
            set {
                if ((this.scanTimeField.Equals(value) != true)) {
                    this.scanTimeField = value;
                    this.RaisePropertyChanged("scanTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogTag", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class AnalogTag : DatabaseManager.ServiceReference1.Tag {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double highLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double lowLimitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double highLimit {
            get {
                return this.highLimitField;
            }
            set {
                if ((this.highLimitField.Equals(value) != true)) {
                    this.highLimitField = value;
                    this.RaisePropertyChanged("highLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double lowLimit {
            get {
                return this.lowLimitField;
            }
            set {
                if ((this.lowLimitField.Equals(value) != true)) {
                    this.lowLimitField = value;
                    this.RaisePropertyChanged("lowLimit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalTag", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class DigitalTag : DatabaseManager.ServiceReference1.Tag {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/changeScan", ReplyAction="http://tempuri.org/IDatabaseManager/changeScanResponse")]
        bool changeScan(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/changeScan", ReplyAction="http://tempuri.org/IDatabaseManager/changeScanResponse")]
        System.Threading.Tasks.Task<bool> changeScanAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTag", ReplyAction="http://tempuri.org/IDatabaseManager/addTagResponse")]
        bool addTag(DatabaseManager.ServiceReference1.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/addTag", ReplyAction="http://tempuri.org/IDatabaseManager/addTagResponse")]
        System.Threading.Tasks.Task<bool> addTagAsync(DatabaseManager.ServiceReference1.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeTag", ReplyAction="http://tempuri.org/IDatabaseManager/removeTagResponse")]
        bool removeTag(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeTag", ReplyAction="http://tempuri.org/IDatabaseManager/removeTagResponse")]
        System.Threading.Tasks.Task<bool> removeTagAsync(string id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : DatabaseManager.ServiceReference1.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<DatabaseManager.ServiceReference1.IDatabaseManager>, DatabaseManager.ServiceReference1.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool changeScan(string id) {
            return base.Channel.changeScan(id);
        }
        
        public System.Threading.Tasks.Task<bool> changeScanAsync(string id) {
            return base.Channel.changeScanAsync(id);
        }
        
        public bool addTag(DatabaseManager.ServiceReference1.Tag tag) {
            return base.Channel.addTag(tag);
        }
        
        public System.Threading.Tasks.Task<bool> addTagAsync(DatabaseManager.ServiceReference1.Tag tag) {
            return base.Channel.addTagAsync(tag);
        }
        
        public bool removeTag(string id) {
            return base.Channel.removeTag(id);
        }
        
        public System.Threading.Tasks.Task<bool> removeTagAsync(string id) {
            return base.Channel.removeTagAsync(id);
        }
    }
}
